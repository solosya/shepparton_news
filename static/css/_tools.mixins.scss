@mixin filterColor($class) {
    @if $class != '' {
        #{$class} {
            color: #000;
        }
        
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            #{$class} {
                filter: invert(51%) sepia(60%) saturate(6307%) hue-rotate(330deg) brightness(90%) contrast(108%);
            }
        }
        &.country, &.campaspe {
            #{$class} {
                color: #8bc833;
            }
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            #{$class} {
                color: #118ce0;
            }
        }

    } @else {

        color: #000;
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            filter: invert(51%) sepia(60%) saturate(6307%) hue-rotate(330deg) brightness(90%) contrast(108%);;
        }
        &.country, &.campaspe {
            color: #8bc833;
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            color: #118ce0;
        }

    }

}


@mixin colourselect($class) {
    @if $class != '' {
        #{$class} {
            color: #000;
        }
        
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            #{$class} {
                color: #f03746;
            }
        }
        &.country, &.campaspe {
            #{$class} {
                color: #8bc833;
            }
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            #{$class} {
                color: #118ce0;
            }
        }

    } @else {

        color: #000;
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            color: #f03746;
        }
        &.country, &.campaspe {
            color: #8bc833;
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            color: #118ce0;
        }

    }

}

@mixin colourselectdark($class) {
    @if $class != '' {
        #{$class} {
            color: #000;
        }
        
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            #{$class} {
                color: #f03746;
            }
        }
        &.country, &.campaspe {
            #{$class} {
                color: #8bc833;
            }
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            #{$class} {
                color: #118ce0;
            }
        }

    } @else {

        color: #000;
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            color: #f03746;
        }
        &.country, &.campaspe {
            color: #8bc833;
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            color: #118ce0;
        }

    }

}

@mixin colourselectbackground($class) {
    @if $class != '' {
        #{$class} {
            background-color: #000;
        }
        
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            #{$class} {
                background-color: #f03746;
            }
        }
        &.country, &.campaspe {
            #{$class} {
                background-color: #8bc833;
            }
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            #{$class} {
                background-color: #118ce0;
            }
        }
    } @else {
        background-color: #000;
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            background-color: #f03746;
        }
        &.country, &.campaspe {
             background-color: #8bc833;
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            background-color: #118ce0;
        }
    }

}

@mixin colourselectfill($class) {
    @if $class != '' {
        #{$class} {
            fill: #000;
        }
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            #{$class} {
                fill: #f03746;
            }
        }
        &.country, &.campaspe {
             #{$class} {
                 fill: #8bc833;
            }
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            #{$class} {
                fill: #118ce0;
            }
        }
    } @else {

        fill: #000;
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            fill: #f03746;
        }
        &.country, &.campaspe {
             fill: #8bc833;
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
            fill: #118ce0;
        }
    }

}

@mixin colourselectstroke($class) {
    @if $class != '' {
        #{$class} {
            stroke: #000;
            fill: #fff;
        }
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {
            #{$class} {
                stroke: #f03746;
            }
        }
        &.country, &.campaspe {
            #{$class} {
                stroke: #8bc833;
            }
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {
           #{$class} {
                stroke: #118ce0;
            }
        }
    } @else {
        stroke: #000;
        fill: #fff;	    
        &.shepparton, &.shepptest, &.riverine, &.benalla, &.cobram, &.seymour, &.southern, &.tatura, &.deniliquin {	        
            stroke: #f03746;	        
        }
        &.country, &.campaspe {	        
            stroke: #8bc833;
        }
        &.dairy, &.corowa, &.kyabram, &.mcivor, &.yarrawonga {	      
            stroke: #118ce0;	       
        }
    }
}

@mixin tintbefore($value:0.4) {
    &:before {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
      opacity: $value;
      background-color: #000;
      z-index: 1;
    }
}
@mixin tintafter($value:0.4) {
    &:after {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
      opacity: $value;
      background-color: #000;
      z-index: 1;
    }
}

@mixin gradientbefore() {
    &:before {
        content: '';
        position: absolute;
        top: 0;
        height:100%;
        bottom: 0;
        width: 100%;
        z-index: 1;
        background-image: -webkit-linear-gradient(rgba(0, 0, 0, 0.0), rgba(0, 0, 0, 0.4));
        background-image: -o-linear-gradient(rgba(0, 0, 0, 0.0), rgba(0, 0, 0, 0.4));
        background-image: linear-gradient(rgba(0, 0, 0, 0.0), rgba(0, 0, 0, 0.4));
    }
}

@mixin gradientafter() {
    &:after {
        content: '';
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
        z-index: 1;
        background-image: -webkit-linear-gradient(rgba(0, 0, 0, 0.0), rgba(0, 0, 0, 0.4));
        background-image: -o-linear-gradient(rgba(0, 0, 0, 0.0), rgba(0, 0, 0, 0.4));
        background-image: linear-gradient(rgba(0, 0, 0, 0.0), rgba(0, 0, 0, 0.4));
    }
}


@mixin font-size($sizeValue: 16, $line: $sizeValue * 1.2) {
    font-size: ($sizeValue / 16) + rem;
    line-height: ($line / 16) + rem;
}


@mixin card-image-size($width, $height) {
    width: $width;
    height: $height;
}

@mixin card-image-none {
    > article {
        > figure{
            display:none;
        }
    }
}


@mixin card-image-full {
    > article {
        > figure{
            position: absolute;
            left: 0;
            top: 0;
            height:100%;
            width: 100%;
            z-index:1;
        }
        > .content {
            position:relative;
            z-index:2;
        }
    }
}

@mixin card-image-left($width, $height:100%) {
    > article {
        > figure{
            @include card-image-size($width, $height);
            float: left;
        }
        > .content {
            display:block;
            width:auto;
        }
    }
}


@mixin card-image-right($width, $height:100%) {
    > article {
        > figure{
            @include card-image-size($width, $height);
            float: right;
        }
        > .content {
            display:block;
            width:auto;
        }
    }
}


@mixin card-image-top($width, $height:100%) {
    > article {
        > figure{
            @include card-image-size($width, $height);
            float: none;
        }
        > .content {
            display:block;
        }
    }
}

@mixin card-image-bottom($width, $height:100%) {
    > article {

        @include flexbox;
        @include flex-direction(column);

        > figure{
            @include card-image-size($width, $height);
            order:2;
        }
        > .content {
            order:1;
            display:block;
        }
    }
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

@mixin opacity($opacity) {
    opacity:$opacity;
    $opacity-ie:$opacity * 100;
    filter:alpha(opacity=$opacity-ie);
}




@mixin card-name($name) {
    // .acme-cards-view, .c-cards-view {
    //     &:hover {
    //         &:before {
    //             content:$name;
    //             position:absolute;
    //             top:-30px;
    //             display:block;
    //             color: white;
    //             z-index: 12;
    //             background: #5ebfbc;
    //             padding: 3px;
    //             font-size:13px;
    //             box-shadow: 2px 3px 5px #8e8e8e;
    //         }
    //     }
    // }
}


// // Default image for Dropzone
@mixin image_background_Dropzone {
    background-image:url("../images/spritemap@2x.png");
    background-position:center center;
    background-repeat:no-repeat;
    background-size:428px auto;
}

// // Default image for Dropzone
@mixin image_background_DropzoneMessage {
    background-image:url("../images/uploadsprite.svg");
    background-position:center center;
    background-repeat:no-repeat;
    background-size:428px auto;
}




@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
}



// /* Padding */
@mixin padding($padding) {
      padding:$padding;
}
@mixin padding-top($padding-top) {
      padding-top:$padding-top;
}
@mixin padding-right($padding-right) {
      padding-right:$padding-right;
}
@mixin padding-bottom($padding-bottom) {
      padding-bottom:$padding-bottom;
}
@mixin padding-left($padding-left) {
      padding-left:$padding-left;
}

// /* Transition */
@mixin transition($transition) {
    transition: all 0.3s ease-in;
    -moz-transition: all 0.3s ease-in;
    -o-transition: all 0.3s ease-in;
    -webkit-transition: all 0.3s ease-in;
    -ms-transition: all 0.3s ease-in;
}

// /* Sizes */
@mixin size($width, $height: $width) {
      width: $width;
      height: $height;
}


// // Image Cover Size
@mixin background-size($background-size) {
    -webkit-background-size:$background-size; /* Chrome, Safari, Opera */
       -moz-background-size:$background-size; /* Mozilla Firefox */
        -ms-background-size:$background-size; /* IE 9 */
         -o-background-size:$background-size;
            background-size:$background-size;
}


// // Transform
@mixin transform($transforms) {
    -webkit-transform:$transforms; /* Chrome, Safari, Opera */
       -moz-transform:$transforms; /* Mozilla Firefox */
         -o-transform:$transforms;
        -ms-transform:$transforms; /* IE 9 */
            transform:$transforms;
}



/* rotate */
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}

/* scale */
@mixin scale($scale) {
    @include transform(scale($scale));
}

/* translate */
@mixin translate ($x, $y) {
    @include transform(translate($x, $y));
}

@mixin translateY ($y) {
    @include transform(translateY($y));
}

/* skew */
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

/* transform origin */
@mixin transform-origin ($origin) {
    -webkit-transform-origin: $origin;
    /* Chrome, Safari, Opera */
    -moz-transform-origin: $origin;
    /* Mozilla Firefox */
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    /* IE 9 */
    transform-origin: $origin;
}



// // Flexbox Mixins
// // http://philipwalton.github.io/solved-by-flexbox/
// // https://github.com/philipwalton/solved-by-flexbox
// //
// // Copyright (c) 2013 Brian Franco
// //
// // Permission is hereby granted, free of charge, to any person obtaining a
// // copy of this software and associated documentation files (the
// // "Software"), to deal in the Software without restriction, including
// // without limitation the rights to use, copy, modify, merge, publish,
// // distribute, sublicense, and/or sell copies of the Software, and to
// // permit persons to whom the Software is furnished to do so, subject to
// // the following conditions:
// // The above copyright notice and this permission notice shall be included
// // in all copies or substantial portions of the Software.
// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// // IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// // CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// // TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// //
// // This is a set of mixins for those who want to mess around with flexbox
// // using the native support of current browsers. For full support table
// // check:http://caniuse.com/flexbox
// //
// // Basically this will use:
// //
// // * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)
// // * Final standards syntax (FF, Safari, Chrome, IE11, Opera)
// //
// // This was inspired by:
// //
// // * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// //
// // With help from:
// //
// // * http://w3.org/tr/css3-flexbox/
// // * http://the-echoplex.net/flexyboxes/
// // * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
// // * http://css-tricks.com/using-flexbox/
// // * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// // * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes

// //----------------------------------------------------------------------

// // Flexbox Containers
// //
// // The 'flex' value causes an element to generate a block-level flex
// // container box.
// //
// // The 'inline-flex' value causes an element to generate a inline-level
// // flex container box.
// //
// // display:flex | inline-flex
// //
// // http://w3.org/tr/css3-flexbox/#flex-containers
// //
// // (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
    display:-webkit-box;
    display:-webkit-flex;
    display:-moz-flex;
    display:-ms-flexbox;
    display:flex;
}

%flexbox { @include flexbox; }

@mixin flex-height($int) { 
    min-height: $int;
    max-height: $int;
}
@mixin flex-width($int) { 
    min-width: $int;
    max-width: $int;
}


// //----------------------------------

// @mixin inline-flex {
// 	display:-webkit-inline-box;
// 	display:-webkit-inline-flex;
// 	display:-moz-inline-flex;
// 	display:-ms-inline-flexbox;
// 	display:inline-flex;
// }

// %inline-flex { @include inline-flex; }

// //----------------------------------------------------------------------

// // Flexbox Direction
// //
// // The 'flex-direction' property specifies how flex items are placed in
// // the flex container, by setting the direction of the flex container's
// // main axis. This determines the direction that flex items are laid out in.
// //
// // Values:row | row-reverse | column | column-reverse
// // Default:row
// //
// // http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value:row) {
    @if $value == row-reverse {
        -webkit-box-direction:reverse;
        -webkit-box-orient:horizontal;
    } @else if $value == column {
        -webkit-box-direction:normal;
        -webkit-box-orient:vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction:reverse;
        -webkit-box-orient:vertical;
    } @else {
        -webkit-box-direction:normal;
        -webkit-box-orient:horizontal;
    }
    -webkit-flex-direction:$value;
    -moz-flex-direction:$value;
    -ms-flex-direction:$value;
    flex-direction:$value;
}

// // Flexbox Align Items
// //
// // Flex items can be aligned in the cross axis of the current line of the
// // flex container, similar to 'justify-content' but in the perpendicular
// // direction. 'align-items' sets the default alignment for all of the flex
// // container's items, including anonymous flex items. 'align-self' allows
// // this default alignment to be overridden for individual flex items. (For
// // anonymous flex items, 'align-self' always matches the value of 'align-items'
// // on their associated flex container.)
// //
// // Values:flex-start | flex-end | center | baseline | stretch
// // Default:stretch
// //
// // http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value:stretch) {
    @if $value == flex-start {
        -webkit-box-align:start;
        -ms-flex-align:start;
    } @else if $value == flex-end {
        -webkit-box-align:end;
        -ms-flex-align:end;
    } @else {
        -webkit-box-align:$value;
        -ms-flex-align:$value;
    }
    -webkit-align-items:$value;
    -moz-align-items:$value;
    align-items:$value;
}
@mixin justify-content($value:flex-start) {
    @if $value == flex-start {
        -webkit-box-pack:start;
        -ms-flex-pack:start;
    } @else if $value == flex-end {
        -webkit-box-pack:end;
        -ms-flex-pack:end;
    } @else if $value == space-between {
        -webkit-box-pack:justify;
        -ms-flex-pack:justify;
    } @else if $value == space-around {
        -ms-flex-pack:distribute;		
    } @else {
        -webkit-box-pack:$value;
        -ms-flex-pack:$value;
    }
    -webkit-justify-content:$value;
    -moz-justify-content:$value;
    justify-content:$value;
    }
// //----------------------------------

// // Flexbox Align Self
// //
// // Values:auto | flex-start | flex-end | center | baseline | stretch
// // Default:auto

@mixin align-self($value:auto) {
    // No Webkit Box Fallback.
    -webkit-align-self:$value;
    -moz-align-self:$value;
    @if $value == flex-start {
        -ms-flex-item-align:start;
    } @else if $value == flex-end {
        -ms-flex-item-align:end;
    } @else {
        -ms-flex-item-align:$value;
    }
    align-self:$value;
}

// //----------------------------------------------------------------------

// // Flexbox Align Content
// //
// // The 'align-content' property aligns a flex container's lines within the
// // flex container when there is extra space in the cross-axis, similar to
// // how 'justify-content' aligns individual items within the main-axis. Note,
// // this property has no effect when the flexbox has only a single line.
// //
// // Values:flex-start | flex-end | center | space-between | space-around | stretch
// // Default:stretch
// //
// // http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value:stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content:$value;
    -moz-align-content:$value;
    @if $value == flex-start {
        -ms-flex-line-pack:start;
    } @else if $value == flex-end {
        -ms-flex-line-pack:end;
    } @else {
        -ms-flex-line-pack:$value;
    }
    align-content:$value;
}



@mixin calc($property, $expression) {
    #{$property}: -moz-calc(#{$expression});
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

